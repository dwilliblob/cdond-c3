version: 2.1

orbs:
  slack: circleci/slack@4.4.2

commands:
  destroy-environment:
    description: Destroy backend and frontend aws cloudformation stacks
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: 
            on_fail
          command: |
            if aws s3 ls | grep udapeople-"${CIRCLE_WORKFLOW_ID}"; then
              aws s3 rm s3://udapeople-"${CIRCLE_WORKFLOW_ID}" --recursive
            fi
            aws cloudformation delete-stack --stack-name frontend-"${CIRCLE_WORKFLOW_ID}"
            aws cloudformation delete-stack --stack-name backend-"${CIRCLE_WORKFLOW_ID}"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when:
            on_fail
          command: |
            success=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" \
              --request GET https://api.memstash.io/values/migration-"${CIRCLE_WORKFLOW_ID}")
            echo $success
            if [[ "${success}" == 1 ]]; then
              npm run migrations:revert
            else
              echo "No migrations"
              return 0
            fi

jobs:  
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build frontend
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          key: frontend-build
          paths:
            - frontend/node_modules
            - frontend/dist
          
      - slack/notify:
          event: fail
          template: basic_fail_1

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build backend
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          key: backend-build
          paths:
            - backend/node_modules
            - backend/dist
      - slack/notify:
          event: fail
          template: basic_fail_1

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Testing frontend
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Testing backend
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scanning frontend
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scanning backend
          command: |
            cd backend
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install compression utility TAR
          command: |
            yum -y install tar gzip
      - run:
          name: Deploying backend
          command: |
            aws cloudformation deploy --template-file .circleci/files/backend.yml --tags project="udapeople" --stack-name backend-"${CIRCLE_WORKFLOW_ID}" --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
      - run:
          name: Storing backend url
          when:
            on_success
          command: |
            BACKEND_URL=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" --query "Reservations[*].Instances[*].PublicIpAddress" --output text)
            export URL=https://api.memstash.io/values/backend_url_${CIRCLE_WORKFLOW_ID}
            echo $BACKEND_URL
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT --data $BACKEND_URL $URL
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET $URL
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Deploying frontend
          command: |
            aws cloudformation deploy --template-file .circleci/files/frontend.yml --tags Name="frontend-${CIRCLE_WORKFLOW_ID}" --stack-name "frontend-${CIRCLE_WORKFLOW_ID}" --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
      - run:
          name: Add backend IP to inventory.txt
          command: |
            aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" --query "Reservations[*].Instances[*].PublicIpAddress" --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
            - backend/
      - destroy-environment:  
          workflow_id: "${CIRCLE_WORKFLOW_ID}"
 
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.12
    steps:
      - checkout
      - attach_workspace:
          at: ~/ 
      - add_ssh_keys:
          fingerprints:
            - "7a:6c:4e:6c:4e:86:8a:3d:c0:06:c5:96:52:d0:27:dd"
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            cat .circleci/ansible/inventory.txt
      - run:
          name: Configure server
          command: |
            cat \<< EOF > ~/project/backend/.env
            ENVIRONMENT=production
            VERSION=1
            TYPEORM_CONNECTION=postgres
            TYPEORM_MIGRATIONS_DIR=./src/migrations
            TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts
            TYPEORM_MIGRATIONS=./src/migrations/*.ts
            TYPEORM_HOST=${TYPEORM_HOST}
            TYPEORM_PORT=${TYPEORM_PORT}
            TYPEORM_USERNAME=${TYPEORM_USERNAME}
            TYPEORM_PASSWORD=${TYPEORM_PASSWORD}
            TYPEORM_DATABASE=${TYPEORM_DATABASE}
            EOF
            cat ~/project/backend/.env
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/configure-server.yml
      - run:
          name: Install AWS CLI for rolling back purposes
          when: on_fail
          command: |
            apk add --update py3-pip && pip3 install --upgrade pip && pip3 install awscli
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID}"

  run-migrations:
    docker:
      - image: python:3.7-alpine3.12
    steps:
      - checkout
      - run:
          name: Install awscli
          command: |
            pip install awscli
      - run:
          name: Install awscli, update/install ansible tar gzip nodejs npm and curl
          command: |
            apk add --update tar gzip nodejs npm curl ansible
      - run:
          name: Running migration
          working_directory: ./backend
          command: |
            cat \<< EOF > .env
            ENVIRONMENT=production
            VERSION=1
            TYPEORM_CONNECTION=postgres
            TYPEORM_MIGRATIONS_DIR=./src/migrations
            TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts
            TYPEORM_MIGRATIONS=./src/migrations/*.ts
            TYPEORM_HOST=${TYPEORM_HOST}
            TYPEORM_PORT=${TYPEORM_PORT}
            TYPEORM_USERNAME=${TYPEORM_USERNAME}
            TYPEORM_PASSWORD=${TYPEORM_PASSWORD}
            TYPEORM_DATABASE=${TYPEORM_DATABASE}
            EOF
            cat .env
            npm i
            echo "Host     | " $TYPEORM_HOST
            echo "PWD      | " $(pwd)
            echo "Database | " $TYPEORM_DATABASE       
            npm run migrations:revert
            npm run migrations > migrations.log
            if check_migration_status -f "$MIGRATIONS_LOG";
            then
              echo "$MIGRATIONS_LOG created"
            fi
            echo "Migrations log items"
            echo "-------------------"
            cat migrations.log
      - run:
          name: Save to memstash
          working_directory: ./backend
          command: |
            MIGRATIONS_LOG=/root/project/backend/migrations.log
            if test -f "$MIGRATIONS_LOG";
            then
              echo "$MIGRATIONS_LOG exists"
            fi
            if grep -q "has been executed successfully" $MIGRATIONS_LOG;
            then
              echo "Database migrations successful"
              curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT --data "Success" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            else
              echo "Database migrations failed"
              curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT --data "Migration failed" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
              return 1
            fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID}

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
            yum install -y curl tar sudo
            curl -sL https://rpm.nodesource.com/setup_13.x | sudo bash -
            yum install -y nodejs
            node --version
      - run:
          name: Get backend url
          command: |
            export API_URL=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/backendurl)
            export API_URL="http://${API_URL}:3030"
            echo "${API_URL}" > .circleci/api_url.txt
      - run:
          name: Deploy frontend objects
          command: |
            export API_URL=$(cat .circleci/api_url.txt)
            echo "${API_URL}" > frontend/.env
            cd frontend
            npm i
            npm run build
            aws s3 cp dist s3://udapeople-"${CIRCLE_WORKFLOW_ID}" --recursive
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID}

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.12
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "7a:6c:4e:6c:4e:86:8a:3d:c0:06:c5:96:52:d0:27:dd"
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: /tmp/artifacts
      - run:
          name: Install dependencies
          command: |
            apk update
            apk add --update ansible aws-cli openssh-client tar
      - run:
          name: Deploy backend
          command: |
            cd ~/project/.circleci/ansible
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID}"

  smoke-test:
    docker:
      - image: python:3.7-alpine3.12
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update nodejs npm curl
            pip install awscli
      - run:
          name: Smoke testing frontend
          command: |
            FRONTEND_URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website-us-east-1.amazonaws.com"
            if curl -s "${FRONTEND_URL}" | grep "Welcome"
            then
              echo "Smoke test PASS"
              return 0
            else
              return 1
            fi
      - run:
            name: Smoke testing backend
            command: |
              export BACKEND_URL=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/backendurl)
              echo "http://${BACKEND_URL}:3030/api/status"
              if curl "http://${BACKEND_URL}:3030/api/status"
              then
                return 0
                echo "Smoke Test FAIL"
              else
                return 1
              fi
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID}"

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
      - run:
          name: Update cloudfront distribution
          command: |
            export PreviousWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo $PreviousWorkflowID >> ~/previous_workflow_id.txt
      - run:
          name: Update cloudfront
          no_output_timeout: 60m
          command: |
            aws cloudformation deploy --template-file ".circleci/files/cloudfront.yml" --stack-name udapeople-cloudfront --tags project=udapeople --parameter-overrides WorkflowID="{CIRCLE_WORKFLOW_ID}"
      - persist_to_workspace:
          root: ~/
          paths:
            - previous_workflow_id.txt
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID}"

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar
            yum -y install gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Retrieve previous workflow id and destroy old stacks and files
          command: |
            PreviousWorkflowID=$(cat ~/previous_workflow_id.txt)
            
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            if "${PreviousWorkflowID}" != "${CIRCLE_WORKFLOW_ID}"
            then
              echo PreviousWorkflowID: "${PreviousWorkflowID}"
              echo NewWorkflowID: "${CIRCLE_WORKFLOW_ID}"
              aws s3 rb s3://udapeople-$OldWorkflowID --force
              aws cloudformation delete-stack --stack-name "udapeople-backend-${PreviousWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${PreviousWorkflowID}"
            else
              echo "Nothing to destroy"
            fi
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID}"

workflows:
  default:
    jobs:
      - build-frontend:
          context: slack-secrets
      - build-backend:
          context: slack-secrets
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]