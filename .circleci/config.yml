version: 2.1

orbs:
  slack: circleci/slack@4.4.2

commands:
  destroy-environment:
    description: Destroy backend and frontend aws cloudformation stacks
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: 
            on_fail
          command: |
            if aws s3 ls | grep udapeople-"${CIRCLE_WORKFLOW_ID:0:7}"; then
              aws s3 rm s3://udapeople-"${CIRCLE_WORKFLOW_ID:0:7}" --recursive
            fi
            aws cloudformation delete-stack --stack-name frontend-"${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name backend-"${CIRCLE_WORKFLOW_ID:0:7}"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when:
            on_fail
          command: |
            success=$(curl --insecure https://kvdb.io/LRztveR4fsKSiMYHL87ef9/migration-"${CIRCLE_WORKFLOW_ID:0:7}")
            echo $success
            if [[ "${success}" == 1 ]]; then
              npm run migrations:revert
            fi

jobs:  
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build frontend
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          key: frontend-build
          paths:
            - frontend/node_modules
            - frontend/dist
      - slack/notify:
          event: fail
          template: basic_fail_1

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build-{{ .Environment.CIRCLE_WORKFLOW_ID }}
      - run:    
          name: Prepare environment for backend
          command: |
            ls -la
            cd backend
            npm i
            npm run build
            ls -la
      - save_cache:
          key: backend-build-{{ .Environment.CIRCLE_WORKFLOW_ID }}
          paths:
            - backend/node_modules
            - backend/dist
      - slack/notify:
          event: fail
          template: basic_fail_1

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Testing frontend
          command: |
            npm install oauth-sign
            ls -al
            cd frontend
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build-{{ .Environment.CIRCLE_WORKFLOW_ID }}
      - run:
          name: Testing backend
          command: |
            ls -al
            cd backend
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scanning frontend
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build-{{ .Environment.CIRCLE_WORKFLOW_ID }} 
      - run:
          name: Scanning backend
          command: |
            cd backend
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install compression utility TAR
          command: |
            yum -y install tar gzip curl
      - run: 
          name: install python3-pip
          command: |
            yum -y install python3-pip 
      - run:
          name: Deploying backend
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --tags project="udapeople" \
            --stack-name udapeople-backend-"${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Deploying frontend
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --tags Name="udapeople" \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Persist backend IP to file
          command: |
            aws ec2 describe-instances --filters "Name=tag:project,Values=udapeople" \
            --query "Reservations[*].Instances[*].PublicIpAddress" \
            --output text >> backendip.txt
      - run:
          name: Add backend IP to inventory.txt
          command: |
            aws ec2 describe-instances --filters "Name=tag:project,Values=udapeople" \
            --query "Reservations[*].Instances[*].PublicIpAddress" \
            --output text >> .circleci/ansible/inventory.txt
      - run:
          name: Check inventory file contents
          command: |
            cat .circleci/ansible/inventory.txt
      - run:
          name: Check ansible template file contents
          command: |
            cat .circleci/files/frontend.yml
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
            - backendip.txt
      - destroy-environment:  
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
 
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    environment:
      ANSIBLE_HOST_KEY_CHECKING: "false"
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "7a:6c:4e:6c:4e:86:8a:3d:c0:06:c5:96:52:d0:27:dd"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl
            pip install awscli
            cat .circleci/ansible/inventory.txt
      - run:
          name: collate backend  files
          command: |
            ls backend       
            tar -czvf backend.tar.gz backend
            mkdir -p ~/project/.circleci/ansible/roles/configure-server/files/
            mv backend.tar.gz  ~/project/.circleci/ansible/roles/configure-server/files/
            cp -f ~/project/backend/package.json  ~/project/.circleci/ansible/roles/configure-server/files/
      - run:
          name: Configure server
          no_output_timeout: 30m
          command: |
            echo "" > "./backend/.env"
            echo "NODE_ENV=local" >> "./backend/.env"
            echo "VERSION=1" >> ./backend/.env
            echo "TYPEORM_CONNECTION=$TYPEORM_CONNECTION" >> "./backend/.env"
            echo "TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS_DIR" >> "./backend/.env"
            echo "TYPEORM_ENTITIES=$TYPEORM_ENTITIES" >> "./backend/.env"
            echo "TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS" >> "./backend/.env"
            echo "TYPEORM_HOST=$TYPEORM_HOST" >> "./backend/.env"
            echo "TYPEORM_PORT=$TYPEORM_PORT" >> "./backend/.env"
            echo "TYPEORM_USERNAME=$TYPEORM_USERNAME" >> "./backend/.env"
            echo "TYPEORM_PASSWORD=$TYPEORM_PASSWORD" >> "./backend/.env"
            echo "TYPEORM_DATABASE=$TYPEORM_DATABASE" >> "./backend/.env"
            cat ./backend/.env
            cp ./backend/.env .circleci/ansible/roles/configure-server/files
            cd .circleci/ansible
            ansible-playbook -vvv -i inventory.txt configure-server.yml
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build-{{ .Environment.CIRCLE_WORKFLOW_ID }}
      - attach_workspace:
          at: ~/
      - run:
          name: install npm
          command: |
            cd backend
            npm install
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt install -y awscli
            npm install typescript
            npm --update install python3 npm
      - run:
          name: prepare environment for backend build
          command: |
            echo "" > "./backend/.env"
            echo "NODE_ENV=local" >> "./backend/.env"
            echo "VERSION=1" >> ./backend/.env
            echo "TYPEORM_CONNECTION=$TYPEORM_CONNECTION" >> "./backend/.env"
            echo "TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS_DIR" >> "./backend/.env"
            echo "TYPEORM_ENTITIES=$TYPEORM_ENTITIES" >> "./backend/.env"
            echo "TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS" >> "./backend/.env"
            echo "TYPEORM_HOST=$TYPEORM_HOST" >> "./backend/.env"
            echo "TYPEORM_PORT=$TYPEORM_PORT" >> "./backend/.env"
            echo "TYPEORM_USERNAME=$TYPEORM_USERNAME" >> "./backend/.env"
            echo "TYPEORM_PASSWORD=$TYPEORM_PASSWORD" >> "./backend/.env"
            echo "TYPEORM_DATABASE=$TYPEORM_DATABASE" >> "./backend/.env"
            cat ./backend/.env
      - run:
          name: Run migrations
          no_output_timeout: 10m
          command: |
            cd backend
            cat .env
            npm i
            npm run build
            npm run migrations 2>&1 | tee migration-log.txt
            status_code="${PIPESTATUS[0]}"
            if [[ ! "${status_code}" == 0 ]]; then
              return 1
            fi
            if cat migration-log.txt | grep "has been executed successfully"; then
               curl https://kvdb.io/LRztveR4fsKSiMYHL87ef9/migration-"${CIRCLE_WORKFLOW_ID:0:7}"  -d '1'
               curl --insecure https://kvdb.io/LRztveR4fsKSiMYHL87ef9/migration-"${CIRCLE_WORKFLOW_ID:0:7}"
            fi
      - persist_to_workspace:
          root: ~/project
          paths:
            - backend
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build-baked-{{ .Environment.CIRCLE_WORKFLOW_ID }}
      - run:
          name: Install dependencies
          command: |
            yum install -y curl tar sudo
            curl -sL https://rpm.nodesource.com/setup_13.x | sudo bash -
            yum install -y nodejs
            node --version
      - run:
          name: Get backend url
          command: |
            export BACKEND_URL=$(curl --insecure https://kvdb.io/LRztveR4fsKSiMYHL87ef9/backend_url_{CIRCLE_WORKFLOW_ID:0:7})
            export BACKEND_URL="${BACKEND_URL}:3030"
            echo "http://${BACKEND_URL}" > .circleci/backend_url.txt
      - run:
          name: Deploy frontend objects
          command: |
            export FRONTEND_URL=$(cat .circleci/frontend_url.txt)
            echo "${FRONTEND_URL}" > frontend/.env
            cd frontend
            npm i
            npm run build
            ls -al
            aws s3 cp dist/ s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-backend:
    docker:
      - image: python:3.9.1-alpine
    environment:
        ANSIBLE_HOST_KEY_CHECKING: "false"
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "7a:6c:4e:6c:4e:86:8a:3d:c0:06:c5:96:52:d0:27:dd"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update curl
            apk add --update nodejs npm rsync openssh
            apk add --update tar gzip zip unzip
            pip install awscli
      - run: cat   .circleci/ansible/inventory.txt
      - run: node -v
      - run:
          name: Deploy backend
          no_output_timeout: 30m
          command: |
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment:
         workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  smoke-test-frontend:
    docker:
      - image: python:3.7-alpine3.12
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update npm curl
            apk add --update py3-pip && pip3 install --upgrade pip && pip3 install awscli
      - run:
          name: Smoke testing frontend
          command: |
            FRONTEND_URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com"
            if curl -s "${FRONTEND_URL}" | grep "Welcome"
            then
              echo "Frontend smoke test PASS"
              return 0
            else
              echo "Frontend Smoke test FAIL"
              return 1
            fi

  smoke-test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt install -y awscli
            sudo apt install -y python3 ansible
      - run:
          name: Get backend url
          command: |
            curl --insecure https://kvdb.io/LRztveR4fsKSiMYHL87ef9/backend_url_{CIRCLE_WORKFLOW_ID:0:7} > backend_url.txt
            cat backend_url.txt
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name, Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            echo ${BACKEND_IP}          
            if curl -s "http://${BACKEND_IP}:3030/api/status" | grep "ok"
            then
              echo 0
            else
              echo 1
            fi
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
      - run:
          name: Update cloudfront distribution
          command: 
            aws cloudformation deploy \
            --template-file ".circleci/files/cloudfront.yml" \
            --stack-name udapeople-cloudfront \
            --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
      - run:
          name: Update cloudfront
          no_output_timeout: 60m
          command: |
            aws cloudformation deploy \
            --template-file ".circleci/files/cloudfront.yml" \
            --stack-name udapeople-cloudfront \
            --parameter-overrides WorkflowID="{CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
      - persist_to_workspace:
          root: ~/
          paths:
            - previous_workflow_id.txt
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar
            yum -y install gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Retrieve previous workflow id and destroy old stacks and files
          command: |
            PreviousWorkflowID=$(cat ~/previous_workflow_id.txt)
            
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            if "${PreviousWorkflowID}" != "${CIRCLE_WORKFLOW_ID:0:7}"
            then
              echo PreviousWorkflowID: "${PreviousWorkflowID:0:7}"
              echo NewWorkflowID: "${CIRCLE_WORKFLOW_ID:0:7}"
              aws s3 rb s3://udapeople-$OldWorkflowID --force
              aws cloudformation delete-stack --stack-name "udapeople-backend-${PreviousWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${PreviousWorkflowID}"
            else
              echo "Nothing to destroy"
            fi
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

workflows:
  default:
    jobs:
      - build-frontend:
          context: slack-secrets
      - build-backend:
          context: slack-secrets
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test-frontend:
          requires: [deploy-backend, deploy-frontend]
      - smoke-test-backend:
          requires: [deploy-backend, deploy-frontend, smoke-test-frontend]
      - cloudfront-update:
          requires: [smoke-test-frontend, smoke-test-backend]
      - cleanup:
          requires: [cloudfront-update]